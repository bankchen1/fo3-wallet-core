version: '3.8'

services:
  # FO3 Wallet Core gRPC API
  fo3-wallet-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fo3-wallet-api
    ports:
      - "50051:50051"  # gRPC API
      - "8080:8080"    # WebSocket
      - "9090:9090"    # Metrics
    environment:
      - RUST_LOG=info
      - GRPC_LISTEN_ADDR=0.0.0.0:50051
      - WEBSOCKET_LISTEN_ADDR=0.0.0.0:8080
      - METRICS_LISTEN_ADDR=0.0.0.0:9090
      # TLS Configuration
      - ENABLE_TLS=${ENABLE_TLS:-false}
      - TLS_CERT_PATH=/app/certs/server.crt
      - TLS_KEY_PATH=/app/certs/server.key
      - CERT_DIR=/app/certs
      # Authentication and Security
      - JWT_SECRET=${JWT_SECRET:-default_secret_change_in_production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-default_key_change_in_production}
      # Observability
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - PROMETHEUS_ENABLED=true
      - TRACE_SAMPLING_RATIO=0.1
      # Blockchain RPC URLs (configure these with your actual endpoints)
      - ETHEREUM_RPC_URL=https://mainnet.infura.io/v3/${INFURA_API_KEY:-your-api-key}
      - ETHEREUM_API_KEY=${INFURA_API_KEY:-}
      - SOLANA_RPC_URL=https://api.mainnet-beta.solana.com
      - BITCOIN_RPC_URL=https://blockstream.info/api
      # Database
      - DATABASE_URL=postgresql://fo3_user:${POSTGRES_PASSWORD:-fo3_secure_password}@postgres:5432/fo3_wallet
      # Redis
      - REDIS_URL=redis://:${REDIS_PASSWORD:-fo3_redis_password}@redis:6379
      # KYC Configuration
      - KYC_STORAGE_PATH=/app/data/kyc_documents
      - KYC_MAX_FILE_SIZE=${KYC_MAX_FILE_SIZE:-10485760}
      - KYC_ENCRYPTION_KEY=${KYC_ENCRYPTION_KEY:-}
    volumes:
      # Mount configuration files if needed
      - ./config:/app/config:ro
      # Mount TLS certificates
      - ./certs:/app/certs:ro
      # Mount KYC document storage
      - kyc_documents:/app/data/kyc_documents
    networks:
      - fo3-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - jaeger
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50051"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database for wallet storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: fo3-postgres
    environment:
      - POSTGRES_DB=fo3_wallet
      - POSTGRES_USER=fo3_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-fo3_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - fo3-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fo3_user -d fo3_wallet"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: fo3-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-fo3_redis_password}
    volumes:
      - redis_data:/data
    networks:
      - fo3-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: fo3-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - fo3-network
    restart: unless-stopped

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: fo3-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - fo3-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: fo3-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - fo3-network
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: fo3-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - fo3-network
    restart: unless-stopped
    depends_on:
      - fo3-wallet-api

networks:
  fo3-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  kyc_documents:
    driver: local
