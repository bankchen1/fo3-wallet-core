version: '3.8'

services:
  # FO3 Wallet Core gRPC API - Production Configuration
  fo3-wallet-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: fo3-wallet-api-prod
    restart: unless-stopped
    ports:
      - "50051:50051"  # gRPC API
      - "8080:8080"    # WebSocket & Health Check
      - "9090:9090"    # Metrics
    environment:
      # Application Settings
      - RUST_LOG=info
      - GRPC_LISTEN_ADDR=0.0.0.0:50051
      - WEBSOCKET_LISTEN_ADDR=0.0.0.0:8080
      - METRICS_LISTEN_ADDR=0.0.0.0:9090
      
      # TLS Configuration (Production)
      - ENABLE_TLS=true
      - TLS_CERT_PATH=/app/certs/server.crt
      - TLS_KEY_PATH=/app/certs/server.key
      - TLS_CA_CERT_PATH=/app/certs/ca.crt
      - CERT_DIR=/app/certs
      
      # Authentication and Security
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # Database Configuration
      - DATABASE_URL=postgresql://fo3_user:${POSTGRES_PASSWORD}@postgres:5432/fo3_wallet
      
      # Redis Configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      
      # Blockchain RPC Configuration
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL}
      - ETHEREUM_API_KEY=${ETHEREUM_API_KEY}
      - SOLANA_RPC_URL=${SOLANA_RPC_URL}
      - SOLANA_API_KEY=${SOLANA_API_KEY}
      - BITCOIN_RPC_URL=${BITCOIN_RPC_URL}
      - BITCOIN_API_KEY=${BITCOIN_API_KEY}
      
      # Observability
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - PROMETHEUS_ENABLED=true
      - TRACE_SAMPLING_RATIO=0.1
      
      # Feature Flags
      - ENABLE_SOLANA=true
      - ENABLE_BITCOIN=true
      - ENABLE_ETHEREUM=true
      - ENABLE_METRICS=true
      - ENABLE_TRACING=true
      
      # Production Settings
      - DEBUG_MODE=false
      - ENABLE_CORS=false
      - ALLOW_INSECURE_CONNECTIONS=false
      
      # Rate Limiting
      - RATE_LIMIT_REQUESTS_PER_MINUTE=100
      - RATE_LIMIT_BURST=20
      
      # KYC Configuration
      - KYC_STORAGE_PATH=/app/data/kyc_documents
      - KYC_MAX_FILE_SIZE=10485760
      - KYC_ENCRYPTION_KEY=${KYC_ENCRYPTION_KEY}
    volumes:
      - ./certs:/app/certs:ro
      - kyc_documents_prod:/app/data/kyc_documents
      - ./logs:/app/logs
    networks:
      - fo3-network-prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50051"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # PostgreSQL Database - Production Configuration
  postgres:
    image: postgres:15-alpine
    container_name: fo3-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=fo3_wallet
      - POSTGRES_USER=fo3_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backups:/backups
    networks:
      - fo3-network-prod
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fo3_user -d fo3_wallet"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Redis Cache - Production Configuration
  redis:
    image: redis:7-alpine
    container_name: fo3-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --appendfsync everysec
    volumes:
      - redis_data_prod:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - fo3-network-prod
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Nginx Reverse Proxy - Production Configuration
  nginx:
    image: nginx:alpine
    container_name: fo3-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - fo3-network-prod
    depends_on:
      - fo3-wallet-api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Prometheus Metrics Collection - Production Configuration
  prometheus:
    image: prom/prometheus:latest
    container_name: fo3-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_prod:/prometheus
    networks:
      - fo3-network-prod
    ports:
      - "9091:9090"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Grafana Monitoring Dashboard - Production Configuration
  grafana:
    image: grafana/grafana:latest
    container_name: fo3-grafana-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - fo3-network-prod
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Jaeger Distributed Tracing - Production Configuration
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: fo3-jaeger-prod
    restart: unless-stopped
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    volumes:
      - jaeger_data_prod:/badger
    networks:
      - fo3-network-prod
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

networks:
  fo3-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/fo3/data/postgres
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/fo3/data/redis
  prometheus_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/fo3/data/prometheus
  grafana_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/fo3/data/grafana
  jaeger_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/fo3/data/jaeger
  kyc_documents_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/fo3/data/kyc_documents
