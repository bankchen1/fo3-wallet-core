apiVersion: apps/v1
kind: Deployment
metadata:
  name: fo3-wallet-core
  namespace: fo3-production
  labels:
    app: fo3-wallet-core
    version: 5b-1-0
    component: backend
    tier: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: fo3-wallet-core
  template:
    metadata:
      labels:
        app: fo3-wallet-core
        version: 5b-1-0
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: fo3-wallet-core
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: fo3-wallet-core
        image: fo3/wallet-core:5b.1.0
        imagePullPolicy: Always
        ports:
        - name: grpc
          containerPort: 50051
          protocol: TCP
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: FO3_ENV
          value: "production"
        - name: FO3_CONFIG_PATH
          value: "/app/config/production.toml"
        - name: FO3_ML_MODELS_PATH
          value: "/app/models"
        - name: FO3_LOG_CONFIG_PATH
          value: "/app/config/logging.yaml"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: fo3-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: fo3-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: fo3-secrets
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: fo3-secrets
              key: encryption-key
        - name: COINGECKO_API_KEY
          valueFrom:
            secretKeyRef:
              name: fo3-secrets
              key: coingecko-api-key
        - name: COINMARKETCAP_API_KEY
          valueFrom:
            secretKeyRef:
              name: fo3-secrets
              key: coinmarketcap-api-key
        - name: SENDGRID_API_KEY
          valueFrom:
            secretKeyRef:
              name: fo3-secrets
              key: sendgrid-api-key
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: fo3-secrets
              key: aws-access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: fo3-secrets
              key: aws-secret-access-key
        - name: AWS_REGION
          value: "us-west-2"
        - name: ETHEREUM_RPC_URL
          valueFrom:
            secretKeyRef:
              name: fo3-secrets
              key: ethereum-rpc-url
        - name: POLYGON_RPC_URL
          valueFrom:
            secretKeyRef:
              name: fo3-secrets
              key: polygon-rpc-url
        - name: SOLANA_RPC_URL
          valueFrom:
            secretKeyRef:
              name: fo3-secrets
              key: solana-rpc-url
        - name: JAEGER_AGENT_ENDPOINT
          value: "jaeger-agent:14268"
        - name: RUST_LOG
          value: "info"
        - name: RUST_BACKTRACE
          value: "1"
        - name: TOKIO_WORKER_THREADS
          value: "8"
        - name: FO3_METRICS_ENABLED
          value: "true"
        - name: FO3_TRACING_ENABLED
          value: "true"
        - name: FO3_HEALTH_MONITORING
          value: "true"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: ml-models-volume
          mountPath: /app/models
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
        - name: data-volume
          mountPath: /app/data
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: fo3-config
      - name: ml-models-volume
        persistentVolumeClaim:
          claimName: fo3-ml-models-pvc
      - name: logs-volume
        emptyDir: {}
      - name: data-volume
        persistentVolumeClaim:
          claimName: fo3-data-pvc
      nodeSelector:
        node-type: compute-optimized
      tolerations:
      - key: "fo3-workload"
        operator: "Equal"
        value: "production"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - fo3-wallet-core
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                - c5.xlarge
                - c5.2xlarge
                - c5.4xlarge
      terminationGracePeriodSeconds: 60
      dnsPolicy: ClusterFirst
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: fo3-wallet-core-service
  namespace: fo3-production
  labels:
    app: fo3-wallet-core
    component: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  selector:
    app: fo3-wallet-core
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051
    protocol: TCP
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  sessionAffinity: None

---
apiVersion: v1
kind: Service
metadata:
  name: fo3-wallet-core-metrics
  namespace: fo3-production
  labels:
    app: fo3-wallet-core
    component: metrics
spec:
  type: ClusterIP
  selector:
    app: fo3-wallet-core
  ports:
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fo3-wallet-core-hpa
  namespace: fo3-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fo3-wallet-core
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: grpc_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fo3-wallet-core-pdb
  namespace: fo3-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: fo3-wallet-core

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fo3-wallet-core-network-policy
  namespace: fo3-production
spec:
  podSelector:
    matchLabels:
      app: fo3-wallet-core
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: fo3-production
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 50051
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: fo3-production
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 443   # HTTPS
    - protocol: TCP
      port: 80    # HTTP
    - protocol: UDP
      port: 53    # DNS
